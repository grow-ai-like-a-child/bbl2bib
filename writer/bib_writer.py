"""
BIB Writer Module
Writes bibliography entries to BIB format
"""

from pathlib import Path
from typing import List, Dict, Optional
import textwrap


class BIBWriter:
    """Writer for BIB files."""
    
    # Standard field order for different entry types
    FIELD_ORDER = {
        'article': ['author', 'title', 'journal', 'year', 'volume', 'number', 'pages', 'month', 'note', 'doi', 'url'],
        'book': ['author', 'editor', 'title', 'publisher', 'year', 'volume', 'number', 'series', 'address', 'edition', 'month', 'note', 'isbn', 'url'],
        'inproceedings': ['author', 'title', 'booktitle', 'year', 'editor', 'volume', 'number', 'series', 'pages', 'address', 'month', 'organization', 'publisher', 'note', 'doi', 'url'],
        'incollection': ['author', 'title', 'booktitle', 'publisher', 'year', 'editor', 'volume', 'number', 'series', 'type', 'chapter', 'pages', 'address', 'edition', 'month', 'note', 'doi', 'url'],
        'mastersthesis': ['author', 'title', 'school', 'year', 'type', 'address', 'month', 'note', 'url'],
        'phdthesis': ['author', 'title', 'school', 'year', 'type', 'address', 'month', 'note', 'url'],
        'techreport': ['author', 'title', 'institution', 'year', 'type', 'number', 'address', 'month', 'note', 'url'],
        'misc': ['author', 'title', 'howpublished', 'month', 'year', 'note', 'url'],
    }
    
    def __init__(self, format_style: str = 'standard'):
        """
        Initialize the BIB writer.
        
        Args:
            format_style: Output formatting style ('standard', 'minimal', 'full')
        """
        self.format_style = format_style
        self.indent = '  ' if format_style != 'minimal' else ''
    
    def write_file(self, filepath: Path, entries: List) -> None:
        """
        Write bibliography entries to a BIB file.
        
        Args:
            filepath: Path to output BIB file
            entries: List of BibEntry objects
        """
        with open(filepath, 'w', encoding='utf-8') as f:
            # Write header comment
            if self.format_style != 'minimal':
                f.write("% Bibliography file generated by bbl2bib\n")
                f.write(f"% Generated from BBL file\n")
                f.write(f"% Total entries: {len(entries)}\n\n")
            
            # Write each entry
            for i, entry in enumerate(entries):
                entry_text = self._format_entry(entry)
                f.write(entry_text)
                
                # Add spacing between entries
                if i < len(entries) - 1:
                    f.write('\n' if self.format_style == 'minimal' else '\n\n')
    
    def _format_entry(self, entry) -> str:
        """Format a single bibliography entry."""
        lines = []
        
        # Entry type and key
        lines.append(f"@{entry.entry_type}{{{entry.cite_key},")
        
        # Get field order for this entry type
        field_order = self.FIELD_ORDER.get(entry.entry_type, [])
        
        # Sort fields according to standard order
        ordered_fields = []
        remaining_fields = dict(entry.fields)
        
        # Add fields in standard order
        for field_name in field_order:
            if field_name in remaining_fields:
                ordered_fields.append((field_name, remaining_fields.pop(field_name)))
        
        # Add any remaining fields not in standard order
        for field_name, value in sorted(remaining_fields.items()):
            ordered_fields.append((field_name, value))
        
        # Format each field
        for i, (field_name, value) in enumerate(ordered_fields):
            formatted_value = self._format_field_value(field_name, value)
            
            if self.format_style == 'minimal':
                # Minimal format: no spacing
                lines.append(f"{field_name}={{{formatted_value}}},")
            else:
                # Standard/full format: with indentation
                lines.append(f"{self.indent}{field_name} = {{{formatted_value}}},")
        
        # Close the entry
        lines.append("}")
        
        return '\n'.join(lines)
    
    def _format_field_value(self, field_name: str, value: str) -> str:
        """Format a field value according to BibTeX conventions."""
        # Clean up the value
        value = value.strip()
        
        # Handle special characters
        value = self._escape_special_chars(value)
        
        # Handle author/editor fields
        if field_name in ['author', 'editor']:
            value = self._format_names(value)
        
        # Handle title capitalization
        elif field_name in ['title', 'booktitle']:
            value = self._protect_capitalization(value)
        
        # Handle pages
        elif field_name == 'pages':
            value = value.replace('-', '--')
        
        return value
    
    def _escape_special_chars(self, text: str) -> str:
        """Escape special LaTeX characters."""
        # Common LaTeX special characters that need escaping
        replacements = {
            '&': r'\&',
            '%': r'\%',
            '$': r'\$',
            '#': r'\#',
            '_': r'\_',
            # Don't escape { and } as they might be intentional
        }
        
        for char, replacement in replacements.items():
            # Only replace if not already escaped
            text = text.replace(char, replacement)
        
        return text
    
    def _format_names(self, names: str) -> str:
        """Format author/editor names for BibTeX."""
        # Ensure 'and' is properly formatted
        names = names.replace(' & ', ' and ')
        names = names.replace(', and ', ' and ')
        
        # Handle "Last, First" format
        # This is already the preferred BibTeX format
        
        return names
    
    def _protect_capitalization(self, title: str) -> str:
        """Protect capitalization in titles."""
        if self.format_style == 'full':
            # In full mode, protect all capital letters
            # Find words that should keep their capitalization
            import re
            
            # Protect acronyms and proper nouns
            def protect_word(match):
                word = match.group(0)
                # If word has multiple capitals or is all caps, protect it
                if sum(1 for c in word if c.isupper()) > 1:
                    return '{' + word + '}'
                return word
            
            # Apply protection to words with multiple capitals
            title = re.sub(r'\b[A-Z][A-Za-z]*[A-Z][A-Za-z]*\b', protect_word, title)
            
            # Protect single capital letters that might be important
            title = re.sub(r'\b([A-Z])\b', r'{\1}', title)
        
        return title
    
    def write_entries_to_string(self, entries: List) -> str:
        """
        Write bibliography entries to a string.
        
        Args:
            entries: List of BibEntry objects
            
        Returns:
            Formatted BIB file content as string
        """
        lines = []
        
        # Write header comment
        if self.format_style != 'minimal':
            lines.append("% Bibliography file generated by bbl2bib")
            lines.append(f"% Total entries: {len(entries)}")
            lines.append("")
        
        # Write each entry
        for i, entry in enumerate(entries):
            entry_text = self._format_entry(entry)
            lines.append(entry_text)
            
            # Add spacing between entries
            if i < len(entries) - 1:
                lines.append("" if self.format_style != 'minimal' else "")
        
        return '\n'.join(lines)
